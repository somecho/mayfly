{"version":3,"sources":["app/status.cljs"],"mappings":";AAOA,yBAAA,zBAAMA;AAAN,AAEE,IAAMC,OAAK,KAAAC;IACLC,MAAI,AAACC,4CAAIC,oBAAgB,AAASJ;IAClCK,eAAa,AAACC;IACdC,QAAM,AAACC;AAHb,AAAA,0FAAA,mDAIQ,kDAAA,8DAAA,nEAAKN,qDAAQG,8DAAiBE;;AAExC,0BAAA,1BAAME;AAAN,AAEE,IAAMC,MAAI,AAACC,gDAAO,AAAU,KAAAV;AAA5B,AACE;AAAA,AACE,AAACW,YAAe;AAAA,AAAO,OAACC,sBAAOH,IAAI,AAAU,KAAAT;GAA7C;;AACA,IAAMa,QAAO,AAAI,KAAAb,KAAU,AAACc;IACtBC,WAAS,CAAGF,QAAMG;IAClBC,YAAU,YAAA,AAAAC,XAAGH,2BAAUN;AAF7B,AAAA,0FAAA,mDAGQ,CAAA,gBAAqB,AAACU,wBAAoBF;;;AAExD,8BAAA,9BAAMG;AAAN,AAEE,IAAMC,4GAAe,AAAA,uFAAA,AAAAH,gBAAWI,1JACX,yKAAA,zKAACC,7BACD,iBAAMC,hCAEN,AAACI;AAFD,AACM,sDAAA,WAAAH,1DAACC;AAAD,AAAS,uDAAA,IAAAD,pDAACE;GAAYH;;AAHjD,AAAA,0FAAA,mDAKQ,0EAAA,7BAAK,AAACK,gBAAMR;;AAEtB,uBAAA,vBAAMS;AAAN,AAAA,0FAAA,mDAAA;;AAEA;;;oBAAA,pBAAMC;AAAN,AAAA,0FAAA,mDAAA,mFAAA,mDAAA,2CAAA,uDAAA,2CAAA,2EAAA,2DAAA,QAAA,iDAAA,kDAAA,0DAAA,sEAAA,kHAAA,gHAAA,mHAAA,gHAAA,+HAAA,mFAAA,iDAAA,2CAAA,uDAAA,2CAAA,/oCAKoBC,6YAIflC,kHACAgC,gHACAtB,mHACAsB,gHACAV,8XACwB,CAAA,aAAkBY","names":["app.status/date-status","date","js/Date","day","cljs.core.nth","app.date/days-short","day-of-month","app.date/get-day","month","app.date/get-month","app.status/reset-status","now","reagent.core.atom","js/setInterval","cljs.core/reset!","today","app.date/get-date-today","tomorrow","app.date/interval","remaining","cljs.core/deref","app.date/millis-to-time","app.status/character-status","characters","app.db/store","clojure.string.split","all-chars","p1__18951#","cljs.core.filter","cljs.core.not_EQ_","cljs.core/rest","cljs.core/count","app.status/separator","app.status/status","app.theme/secondary"],"sourcesContent":["(ns app.status\n  (:require [app.theme :as theme]\n            [app.db :as db]\n            [app.date :as date]\n            [clojure.string :as str]\n            [reagent.core :as r]))\n\n(defn date-status\n  []\n  (let [date (js/Date.)\n        day (nth date/days-short (.getDay date))\n        day-of-month (date/get-day)\n        month (date/get-month)]\n    [:div (str day \" \" day-of-month \"/\" month)]))\n\n(defn reset-status\n  []\n  (let [now (r/atom (.getTime (js/Date.)))]\n    (fn []\n      (js/setInterval (fn [] (reset! now (.getTime (js/Date.)))) 1000)\n      (let [today  (-> (js/Date. (date/get-date-today)) .getTime)\n            tomorrow (+ today date/interval)\n            remaining (- tomorrow @now)]\n        [:div (str \"resetting in \" (date/millis-to-time remaining))]))))\n\n(defn character-status\n  []\n  (let [characters (-> (:content @db/store)\n                       (str/split #\"\")\n                       (as-> all-chars\n                             (filter #(not= \" \" %) all-chars))\n                       (rest))]\n    [:div (str (count characters) \" characters\")]))\n\n(defn separator [] [:div \"\ud802\udd1f\"])\n\n(defn status\n  \"The status bar\"\n  []\n  [:div\n   [:div\n    {:style {:color theme/secondary\n             :padding \"8px 0\"\n             :gap :4px\n             :display :flex}}\n    [date-status]\n    [separator]\n    [reset-status]\n    [separator]\n    [character-status]]\n   [:hr {:style {:border-top (str \"1px solid \" theme/secondary)}}]])\n\n\n"]}