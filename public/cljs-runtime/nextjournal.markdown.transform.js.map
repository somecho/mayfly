{"version":3,"sources":["nextjournal/markdown/transform.cljc"],"mappings":"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","names":["nextjournal.markdown.transform/guard","pred","val","p__16290","map__16291","cljs.core/--destructure-map","cljs.core.get","nextjournal.markdown.transform/->text","_node","type","text","content","or__5045__auto__","cljs.core._EQ_","cljs.core.apply","cljs.core/str","cljs.core.map","p__16292","map__16293","nextjournal.markdown.transform/hydrate-toc","doc","toc","cljs.core.update","cljs.core.partial","cljs.core/into","p__16294","map__16295","node","t","p__16296","map__16297","nextjournal.markdown.transform/table-alignment","style","vec__16298","cljs.core.nth","_","alignment","cljs.core/re-matches","p__16301","map__16302","nextjournal.markdown.transform/heading-markup","l","cljs.core.keyword","p__16303","map__16304","nextjournal.markdown.transform/into-markup","mkup","ctx","cljs.core.conj","cljs.core.into","cljs.core.keep","nextjournal.markdown.transform/->hiccup","cljs.core.assoc","p__16306","p__16307","map__16308","map__16309","nextjournal.markdown.transform/toc->hiccup","parent","attrs","children","id","toc-item","G__16310","cljs.core/seq","p1__16305#","temp__5808__auto__","el","js/document","G__16311","cljs.core.not_EQ_","nextjournal.markdown.transform/default-hiccup-renderers","p__16342","map__16343","p__16344","map__16345","p__16340","map__16341","cljs.core/constantly","p__16330","p__16331","map__16332","map__16333","p__16322","map__16323","p__16336","map__16337","p__16312","map__16313","ta","G__16314","p__16315","map__16316","G__16317","p__16326","map__16327","ref","label","p__16320","map__16321","p__16334","map__16335","p__16324","map__16325","p__16328","map__16329","p__16338","map__16339","p__16318","map__16319","d","var_args","G__16347","js/Error","p__16348","map__16349","nextjournal.markdown.transform.__GT_hiccup","map__16350","G__16351","temp__5806__auto__","f","cljs.core/fn?","cljs.core.pr_str"],"sourcesContent":["(ns nextjournal.markdown.transform\n  \"transform markdown data as returned by `nextjournal.markdown/parse` into other formats, currently:\n     * hiccup\")\n\n;; helpers\n(defn guard [pred val] (when (pred val) val))\n(defn ->text [{:as _node :keys [type text content]}]\n  (or (when (= :softbreak type) \" \")\n      text\n      (apply str (map ->text content))))\n\n(defn hydrate-toc\n  \"Scans doc contents and replaces toc node placeholder with the toc node accumulated during parse.\"\n  [{:as doc :keys [toc]}]\n  (update doc :content (partial into [] (map (fn [{:as node t :type}] (if (= :toc t) toc node))))))\n\n(defn table-alignment [{:keys [style]}]\n  (when (string? style)\n    (let [[_ alignment] (re-matches #\"^text-align:(.+)$\" style)]\n      (when alignment {:text-align alignment}))))\n\n(defn heading-markup [{l :heading-level}] [(keyword (str \"h\" (or l 1)))])\n\n;; into-markup\n(declare ->hiccup)\n(defn into-markup\n  \"Takes a hiccup vector, a context and a node, puts node's `:content` into markup mapping through `->hiccup`.\"\n  [mkup ctx {:as node :keys [text content]}]\n  (cond ;; formula nodes are leaves: have text and no contents\n    text (conj mkup text)\n    content (into mkup\n                  (keep (partial ->hiccup (assoc ctx ::parent node)))\n                  content)))\n\n(defn toc->hiccup [{:as ctx ::keys [parent]} {:as node :keys [attrs content children]}]\n  (let [id (:id attrs)\n        toc-item (cond-> [:div]\n                   (seq content)\n                   (conj [:a {:href (str \"#\" id) #?@(:cljs [:on-click #(when-some [el (.getElementById js/document id)] (.preventDefault %) (.scrollIntoViewIfNeeded el))])}\n                          (-> node heading-markup (into-markup ctx node))])\n                   (seq children)\n                   (conj (into [:ul] (map (partial ->hiccup (assoc ctx ::parent node))) children)))]\n    (cond->> toc-item\n      (= :toc (:type parent))\n      (conj [:li.toc-item])\n      (not= :toc (:type parent))\n      (conj [:div.toc]))))\n\n(comment\n  ;; override toc rendering\n  (-> \"# Hello\na paragraph\n[[TOC]]\n## Section _nice_ One\n### Section Nested\n## Section **terrible** Idea\n\"\n      nextjournal.markdown/parse\n      ;; :toc\n      ;; ->hiccup #_\n      (->> (->hiccup (assoc default-hiccup-renderers\n                            :toc (fn [ctx {:as node :keys [content children heading-level]}]\n                                   (cond-> [:div]\n                                     (seq content) (conj [:span.title {:data-level heading-level} (:id node)])\n                                     (seq children) (conj (into [:ul] (map (partial ->hiccup ctx)) children)))))))))\n\n(def default-hiccup-renderers\n  {:doc (partial into-markup [:div])\n   :heading (fn [ctx {:as node :keys [attrs]}] (-> (heading-markup node) (conj attrs) (into-markup ctx node)))\n   :paragraph (partial into-markup [:p])\n   :plain (partial into-markup [:<>])\n   :text (fn [_ {:keys [text]}] text)\n   :hashtag (fn [_ {:keys [text]}] [:a.tag {:href (str \"/tags/\" text)} (str \"#\" text)]) ;; TODO: make it configurable\n   :blockquote (partial into-markup [:blockquote])\n   :ruler (constantly [:hr])\n\n   ;; images\n   :image (fn [{:as ctx ::keys [parent]} {:as node :keys [attrs]}]\n            (if (= :paragraph (:type parent))\n              [:img.inline attrs]\n              [:figure.image [:img attrs] (into-markup [:figcaption] ctx node)]))\n\n   ;; code\n   :code (partial into-markup [:pre.viewer-code.not-prose])\n\n   ;; breaks\n   :softbreak (constantly \" \")\n   :hardbreak (constantly [:br])\n\n   ;; formulas\n   :formula (partial into-markup [:span.formula])\n   :block-formula (partial into-markup [:figure.formula])\n\n   ;; lists\n   :bullet-list (partial into-markup [:ul])\n   :list-item (partial into-markup [:li])\n   :todo-list (partial into-markup [:ul.contains-task-list])\n   :numbered-list (fn [ctx {:as node :keys [attrs]}] (into-markup [:ol attrs] ctx node))\n\n   :todo-item (fn [ctx {:as node :keys [attrs]}]\n                (into-markup [:li [:input {:type \"checkbox\" :checked (:checked attrs)}]] ctx node))\n\n   ;; tables\n   :table (partial into-markup [:table])\n   :table-head (partial into-markup [:thead])\n   :table-body (partial into-markup [:tbody])\n   :table-row (partial into-markup [:tr])\n   :table-header (fn [ctx {:as node :keys [attrs]}]\n                   (into-markup (let [ta (table-alignment attrs)] (cond-> [:th] ta (conj {:style ta})))\n                                ctx node))\n   :table-data (fn [ctx {:as node :keys [attrs]}]\n                 (into-markup (let [ta (table-alignment attrs)] (cond-> [:td] ta (conj {:style ta})))\n                              ctx node))\n\n   ;; footnotes & sidenodes\n   :sidenote-container (partial into-markup [:div.sidenote-container])\n   :sidenote-column (partial into-markup [:div.sidenote-column])\n   :sidenote-ref (fn [_ {:keys [ref label]}] [:sup.sidenote-ref {:data-label label} (str (inc ref))])\n   :sidenote (fn [ctx {:as node :keys [ref]}]\n               (into-markup [:span.sidenote [:sup {:style {:margin-right \"3px\"}} (str (inc ref))]] ctx node))\n\n   :footnote-ref (fn [_ {:keys [ref label]}] [:sup.sidenote-ref {:data-label label} (str (inc ref))])\n   ;; NOTE: there's no default footnote placement (see n.markdown.parser/insert-sidenotes)\n   :footnote (fn [ctx {:as node :keys [ref label]}]\n               (into-markup [:div.footnote [:span.footnote-label {:data-ref ref} label]] ctx node))\n\n   ;; TOC\n   :toc toc->hiccup\n\n   ;; marks\n   :em (partial into-markup [:em])\n   :strong (partial into-markup [:strong])\n   :monospace (partial into-markup [:code])\n   :strikethrough (partial into-markup [:s])\n   :link (fn [ctx {:as node :keys [attrs]}] (into-markup [:a {:href (:href attrs)}] ctx node))\n   :internal-link (fn [_ {:keys [attrs text]}] [:a.internal {:href (:href attrs text)} text])\n\n   ;; default convenience fn to wrap extra markup around the default one from within the overriding function\n   :default (fn [ctx {:as node t :type}] (when-some [d (get default-hiccup-renderers t)] (d ctx node)))\n   })\n\n(defn ->hiccup\n  ([node] (->hiccup default-hiccup-renderers node))\n  ([ctx {:as node t :type}]\n   (let [{:as node :keys [type]} (cond-> node (= :doc t) hydrate-toc)]\n     (if-some [f (guard fn? (get ctx type))]\n       (f ctx node)\n       [:span.message.red\n        [:strong (str \"Unknown type: '\" type \"'.\")]\n        [:code (pr-str node)]]\n       ))))\n\n(comment\n  (-> \"# Hello\n\na nice paragraph with sidenotes[^my-note]\n\n[[TOC]]\n\n## Section One\nA nice $\\\\phi$ formula [for _real_ **strong** fun](/path/to) soft\nbreak\n\n- [ ] one **ahoi** list\n- two `nice` and ~~three~~\n- [x] checked\n\n> that said who?\n\n---\n\n## Section Two\n\n### Tables\n\n| Syntax |  JVM                     | JavaScript                      |\n|--------|-------------------------:|:--------------------------------|\n|   foo  |  Loca _lDate_ ahoiii     | goog.date.Date                  |\n|   bar  |  java.time.LocalTime     | some [kinky](link/to/something) |\n|   bag  |  java.time.LocalDateTime | $\\\\phi$                         |\n\n### Images\n\n![Some **nice** caption](https://www.example.com/images/dinosaur.jpg)\n\nand here as inline ![alt](foo/bar) image\n\n```clj\n(some nice clojure)\n```\n\n[^my-note]: Here can discuss at length\"\n    nextjournal.markdown/parse\n    ->hiccup\n    )\n\n  ;; override defaults\n  (->> \"## Title\npar one\n\npar two\"\n    nextjournal.markdown/parse\n    (->hiccup (assoc default-hiccup-renderers\n                     :heading (partial into-markup [:h1.at-all-levels])\n                     ;; wrap something around the default\n                     :paragraph (fn [{:as ctx d :default} node] [:div.p-container (d ctx node)]))))\n  )\n"],"x_google_ignoreList":[0]}