{"version":3,"sources":["nextjournal/markdown.cljs"],"mappings":";;;AAOA,AAAA,CAAA,AAAA,yEAAAA,zEAAaC;;AAAb,CAAA,AAAA,AAAaA,wFAEX,WAAUC,MAAKC;AAAf,AAAA,gBAAA,ZAAUD;AAAV,AAAoB,IAAAE,WAAOF;AAAP,AAAA,GAAA,GAAA,CAAAE,YAAA;AAAA,QAAAA,SAAA,AAAAC,yCAAYF;;AAAZG;;;AAEtB,AAAKC,gCAASC;AAEd,AAAA;;;6BAAA,qCAAAC,lEAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,yDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,yDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,2DAAA,3DAAMD,sEAEFE;AAFJ,AAEmB,OAACC,yDAAMC,sCAA0BF;;;AAFpD,CAAA,2DAAA,3DAAMF,sEAGFK,IAAIH;AAHR,AAGuB,OAACI,gEAAsBD,IAAI,CAACT,8DAAAA,6EAAAA,jBAASM,yDAAAA;;;AAH5D,CAAA,qDAAA,rDAAMF;;AAAN,AAKA,AAAA;;;mCAAA,2CAAAF,9EAAMU;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,+DAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,+DAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAP,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,iEAAA,jEAAMO,4EAEFN;AAFJ,AAEmB,OAACO,+DAASC,wDAA4CR;;;AAFzE,CAAA,iEAAA,jEAAMM,4EAGFG,IAAIT;AAHR,6IAG4BA,zDAAcC,pFAAM,oFAAA,7EAACS,yEAA4BD;;;AAH7E,CAAA,2DAAA,3DAAMH;;AAAN,AAKA","names":["cljs.core/PROTOCOL_SENTINEL","js/module$node_modules$markdown_it$lib$token","this","key","obj18603","applied-science.js-interop.impl/wrap-key","js/undefined","nextjournal.markdown/tokenize","js/module$js$markdown.tokenize","var_args","G__18606","nextjournal.markdown/parse","js/Error","markdown-text","nextjournal.markdown.parse","nextjournal.markdown.parser/empty-doc","doc","nextjournal.markdown.parser.parse","G__18608","nextjournal.markdown/->hiccup","nextjournal.markdown.__GT_hiccup","nextjournal.markdown.transform/default-hiccup-renderers","ctx","nextjournal.markdown.transform.__GT_hiccup"],"sourcesContent":["(ns nextjournal.markdown\n  (:require [\"/js/markdown\" :as md]\n            [\"markdown-it/lib/token\" :as Token]\n            [applied-science.js-interop :as j]\n            [nextjournal.markdown.parser :as markdown.parser]\n            [nextjournal.markdown.transform :as markdown.transform]))\n\n(extend-type Token\n  ILookup\n  (-lookup [this key] (j/get this key)))\n\n(def tokenize md/tokenize)\n\n(defn parse\n  \"Turns a markdown string into a nested clojure structure.\"\n  ([markdown-text] (parse markdown.parser/empty-doc markdown-text))\n  ([doc markdown-text] (markdown.parser/parse doc (tokenize markdown-text))))\n\n(defn ->hiccup\n  \"Turns a markdown string into hiccup.\"\n  ([markdown-text] (->hiccup markdown.transform/default-hiccup-renderers markdown-text))\n  ([ctx markdown-text] (->> markdown-text parse (markdown.transform/->hiccup ctx))))\n\n(comment\n (tokenize \"# Title\n- [ ] one\n- [x] two\n\")\n\n (parse \"# Hello Markdown\n- [ ] what\n- [ ] [nice](very/nice/thing)\n- [x] ~~thing~~\n\")\n\n (->hiccup \"# Hello Markdown\n\n* What's _going_ on?\n\")\n\n (->hiccup\n  (assoc markdown.transform/default-hiccup-renderers\n    :heading (fn [ctx node]\n               [:h1.some-extra.class\n                (markdown.transform/into-markup [:span.some-other-class] ctx node)]))\n  \"# Hello Markdown\n* What's _going_ on?\n\")\n\n ;; launch shadow cljs repl\n (shadow.cljs.devtools.api/repl :browser-test))\n"],"x_google_ignoreList":[0]}