{"version":3,"sources":["nextjournal/markdown/parser.cljc"],"mappings":"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","names":["nextjournal.markdown.parser/get-in*","applied-science.js-interop/get-in","nextjournal.markdown.parser/update*","applied-science.js-interop/update!","nextjournal.markdown.parser/re-idx-seq","re","text","rex","js/RegExp","cljs.core.take_while","cljs.core/some?","cljs.core.repeatedly","temp__5808__auto__","m","cljs.core/vec","nextjournal.markdown.parser/inc-last","path","cljs.core.update","cljs.core/count","cljs.core/inc","p__18401","map__18402","cljs.core/--destructure-map","cljs.core.get","nextjournal.markdown.parser/hlevel","_token","hn","G__18403","cljs.core/re-matches","cljs.core/second","js/parseInt","nextjournal.markdown.parser/split-by-emoji","s","vec__18425","cljs.core.nth","match","start","end","cljs.core/first","nextjournal.markdown.parser.emoji/regex","cljs.core.subs","clojure.string/trim","nextjournal.markdown.parser/text->id+emoji","vec__18453","emoji","text'","G__18456","cljs.core.apply","cljs.core/str","cljs.core.map","cljs.core.comp","clojure.string/lower-case","c","G__18458","cljs.core.assoc","nextjournal.markdown.parser/parse-fence-info","info-str","e18459","tokens","clojure.string/replace","clojure.string.split","cljs.core.reduce","p__18460","map__18461","info-map","language","token","vec__18463","_","k","v","clojure.string/starts-with?","and__5043__auto__","cljs.core.keyword","cljs.core/not","nextjournal.markdown.parser/text-node","nextjournal.markdown.parser/formula","nextjournal.markdown.parser/block-formula","nextjournal.markdown.parser/footnote-ref","ref","label","G__18466","nextjournal.markdown.parser/node","type","content","attrs","top-level","G__18467","cljs.core/seq","cljs.core.merge","p__18468","map__18469","nextjournal.markdown.parser/empty-text-node?","t","cljs.core._EQ_","cljs.core/empty?","p__18470","map__18471","nextjournal.markdown.parser/push-node","doc","node","e18472","G__18473","cljs.core.update_in","cljs.core/pop","cljs.core/conj","js/Error","e","cljs.core.ex_info","nextjournal.markdown.parser/push-nodes","cljs.core.partial","cljs.core/reduce","var_args","G__18475","nextjournal.markdown.parser/open-node","nextjournal.markdown.parser.open_node","cljs.core/into","nextjournal.markdown.parser/ppop","nextjournal.markdown.parser/close-node","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","nextjournal.markdown.parser/update-current","p__18479","map__18480","seq18476","G__18477","cljs.core/next","G__18478","self__5754__auto__","fn","args","cljs.core/update-in","p__18481","map__18482","nextjournal.markdown.parser/current-parent-node","cljs.core.get_in","p__18483","map__18484","nextjournal.markdown.parser/current-ancestor-nodes","p","ancestors","cljs.core.conj","nextjournal.markdown.parser/->zip","clojure.zip/zipper","cljs.core.every_pred","cljs.core/map?","cs","p__18485","map__18486","nextjournal.markdown.parser/assign-node-id+emoji","id->index","text->id+emoji-fn","map__18487","id","cljs.core/ifn?","G__18488","id-count","G__18489","cljs.core.fnil","or__5045__auto__","G__18490","cljs.core/assoc-in","G__18491","p__18492","map__18493","nextjournal.markdown.parser/into-toc","toc","toc-item","heading-level","l","toc-path","type-path","x__5130__auto__","y__5131__auto__","p__18494","map__18495","nextjournal.markdown.parser/add-to-toc","h","G__18496","cljs.core/pos-int?","p__18497","map__18498","nextjournal.markdown.parser/set-title-when-missing","title","heading","G__18499","nextjournal.markdown.transform/->text","p__18500","map__18501","nextjournal.markdown.parser/add-title+toc","rf","xf","cljs.core.filter","js/nextjournal","js/nextjournal.markdown","js/nextjournal.markdown.parser","js/nextjournal.markdown.parser.apply-token","method-table__5642__auto__","cljs.core.atom","prefer-table__5643__auto__","method-cache__5644__auto__","cached-hierarchy__5645__auto__","hierarchy__5646__auto__","fexpr__18502","cljs.core/MultiFn","cljs.core.symbol","nextjournal.markdown.parser/apply-token","_doc","cljs.core.prn","p__18503","map__18504","doc-level","map__18505","doc'","G__18506","p__18507","map__18508","hidden","p__18509","map__18510","map__18511","has-todos","p__18512","map__18513","p__18514","map__18515","map__18516","todo","p__18517","map__18518","nextjournal.markdown.parser.update_current","cljs.core/dissoc","p__18519","map__18520","p__18521","map__18522","i","p__18523","map__18524","footnotes","G__18525","G__18526","G__18527","G__18528","p__18529","map__18530","footnote-offset","G__18531","G__18532","G__18533","G__18534","G__18535","p__18536","map__18537","p__18538","map__18539","path-to-restore","cljs.core.dissoc","p__18540","map__18541","nextjournal.markdown.parser/footnote->sidenote","G__18542","nextjournal.markdown.parser/node-with-sidenote-refs","p-node","refs","clojure.zip/end?","clojure.zip/root","map__18544","clojure.zip/node","clojure.zip/next","clojure.zip.edit","cljs.core/assoc","p__18546","map__18547","nextjournal.markdown.parser/insert-sidenote-containers","root","loc","clojure.zip/down","parent","cljs.core/contains?","temp__5806__auto__","map__18548","new-loc","clojure.zip/replace","clojure.zip/append-child","p1__18545#","cljs.core.mapv","clojure.zip/right","clojure.zip/up","p1__18549#","nextjournal.markdown.parser/hashtag-tokenizer","cljs.core/every?","cljs.core/complement","p1__18550#","nextjournal.markdown.parser/internal-link-tokenizer","p__18551","map__18552","nextjournal.markdown.parser/normalize-tokenizer","tokenizer","doc-handler","pred","handler","regex","tokenizer-fn","G__18553","p__18554","map__18555","cljs.core/constantly","p__18556","p__18557","map__18558","map__18559","nextjournal.markdown.parser/tokenize-text-node","tkz","cljs.core/fn?","idx-seq","map__18560","text-hnode","nodes","remaining-text","p__18561","p__18562","map__18563","vec__18564","acc","cljs.core/subs","G__18567","cljs.core/reverse","G__18568","p__18569","p__18570","map__18571","map__18572","text-tokenizers","p__18573","map__18574","G__18575","G__18576","cljs.core.mapcat","p__18577","map__18578","p__18579","map__18580","ts","nextjournal.markdown.parser/apply-tokens","p__18581","map__18582","p__18583","map__18584","p__18585","map__18586","children","G__18587","G__18588","p__18589","map__18590","nextjournal.markdown.parser/pairs->kmap","pairs","cljs.core.into","cljs.core.juxt","cljs.core/keyword","mapify-attrs-xf","x","nextjournal.markdown.parser/empty-doc","G__18592","nextjournal.markdown.parser/parse","nextjournal.markdown.parser.parse","cljs.core/map","p__18593","p__18594","map__18595","vec__18596","nextjournal.markdown.parser/section-at","pos","map__18599","section-level","in-section?","p__18600","map__18601","cljs.core/cons","cljs.core.drop","nextjournal.markdown.parser/flatten-tokens","cljs.core/tree-seq","p1__18602#","cljs.core/select-keys"],"sourcesContent":[";; # \ud83e\udde9 Parsing\n;;\n;; Deals with transforming a sequence of tokens obtained by [markdown-it] into a nested AST composed of nested _nodes_.\n;;\n;; A _node_ is a clojure map and has no closed specification at the moment. We do follow a few conventions for its keys:\n;;\n;; - `:type` a keyword (:heading, :paragraph, :text, :code etc.) present on all nodes.\n;;\n;; When a node contains other child nodes, then it will have a\n;;\n;; - `:content` a collection of nodes representing nested content\n;;\n;; when a node is a textual leaf (as in a `:text` or `:formula` nodes) it carries a\n;; - `:text` key with a string value\n;;\n;; Other keys might include e.g.\n;;\n;; - `:info` specific of fenced code blocks\n;; - `:heading-level` specific of `:heading` nodes\n;; - `:attrs` attributes as passed by markdown-it tokens (e.g `{:style \"some style info\"}`)\n(ns nextjournal.markdown.parser\n  (:require [clojure.string :as str]\n            [clojure.zip :as z]\n            [nextjournal.markdown.transform :as md.transform]\n            [nextjournal.markdown.parser.emoji :as emoji]\n            #?@(:cljs [[applied-science.js-interop :as j]\n                       [cljs.reader :as reader]])))\n\n;; clj common accessors\n(def get-in* #?(:clj get-in :cljs j/get-in))\n(def update* #?(:clj update :cljs j/update!))\n\n#?(:clj (defn re-groups* [m] (let [g (re-groups m)] (cond-> g (not (vector? g)) vector))))\n(defn re-idx-seq\n  \"Takes a regex and a string, returns a seq of triplets comprised of match groups followed by indices delimiting each match.\"\n  [re text]\n  #?(:clj (let [m (re-matcher re text)]\n            (take-while some? (repeatedly #(when (.find m) [(re-groups* m) (.start m) (.end m)]))))\n     :cljs (let [rex (js/RegExp. (.-source re) \"g\")]\n             (take-while some? (repeatedly #(when-some [m (.exec rex text)] [(vec m) (.-index m) (.-lastIndex rex)]))))))\n\n\n(comment (re-idx-seq #\"\\{\\{([^{]+)\\}\\}\" \"foo {{hello}} bar\"))\n(comment (re-idx-seq #\"\\{\\{[^{]+\\}\\}\" \"foo {{hello}} bar\"))\n;; region node operations\n;; helpers\n(defn inc-last [path] (update path (dec (count path)) inc))\n(defn hlevel [{:as _token hn :tag}] (when (string? hn) (some-> (re-matches #\"h([\\d])\" hn) second #?(:clj Integer/parseInt :cljs js/parseInt))))\n\n(defn split-by-emoji [s]\n  (let [[match start end] (first (re-idx-seq emoji/regex s))]\n    (if match\n      [(subs s start end) (str/trim (subs s end))]\n      [nil s])))\n\n#_(split-by-emoji \" Stop\")\n#_(split-by-emoji \"\ud83e\udd1a\ud83c\udffd Stop\")\n#_(split-by-emoji \"\ud83e\udd1a\ud83c\udffd\ud83e\udd1a Stop\")\n#_(split-by-emoji \"\ud83e\udd1a\ud83c\udffdStop\")\n#_(split-by-emoji \"\ud83e\udd1a\ud83c\udffd   Stop\")\n#_(split-by-emoji \"\ud83d\ude00 Stop\")\n#_(split-by-emoji \"\u269b\ufe0f Stop\")\n#_(split-by-emoji \"\u269b Stop\")\n#_(split-by-emoji \"\u2b07 Stop\")\n#_(split-by-emoji \"Should not \ud83d\ude41\ufe0f Split\")\n\n(defn text->id+emoji [text]\n  (when (string? text)\n    (let [[emoji text'] (split-by-emoji (str/trim text))]\n      (cond-> {:id (apply str (map (comp str/lower-case (fn [c] (case c (\\space \\_) \\- c))) text'))}\n        emoji (assoc :emoji emoji)))))\n\n#_(text->id+emoji \"Hello There\")\n#_(text->id+emoji \"Hello_There\")\n#_(text->id+emoji \"\ud83d\udc69\u200d\ud83d\udd2c Quantum Physics\")\n\n;; `parse-fence-info` ingests nextjournal, GFM, Pandoc and RMarkdown fenced code block info (any text following the leading 3 backticks) and returns a map\n;;\n;; _nextjournal_ / _GFM_\n;;\n;;    ```python id=2e3541da-0735-4b7f-a12f-4fb1bfcb6138\n;;    python code\n;;    ```\n;;\n;; _Pandoc_\n;;\n;;    ```{#pandoc-id .languge .extra-class key=Val}\n;;    code in language\n;;    ```\n;;\n;; _Rmd_\n;;\n;;    ```{r cars, echo=FALSE}\n;;    R code\n;;    ```\n;;\n;; See also:\n;; - https://github.github.com/gfm/#info-string\n;; - https://pandoc.org/MANUAL.html#fenced-code-blocks\n;; - https://rstudio.com/wp-content/uploads/2016/03/rmarkdown-cheatsheet-2.0.pdf\"\n\n(defn parse-fence-info [info-str]\n  (try\n    (when (string? info-str)\n      (let [tokens (-> info-str\n                       str/trim\n                       (str/replace #\"[\\{\\}\\,]\" \"\")         ;; remove Pandoc/Rmarkdown brackets and commas\n                       (str/replace \".\" \"\")                 ;; remove dots\n                       (str/split #\" \"))]                   ;; split by spaces\n        (reduce\n         (fn [{:as info-map :keys [language]} token]\n           (let [[_ k v] (re-matches #\"^([^=]+)=([^=]+)$\" token)]\n             (cond\n               (str/starts-with? token \"#\") (assoc info-map :id (str/replace token #\"^#\" \"\")) ;; pandoc #id\n               (and k v) (assoc info-map (keyword k) v)\n               (not language) (assoc info-map :language token) ;; language is the first simple token which is not a pandoc's id\n               :else (assoc info-map (keyword token) true))))\n         {}\n         tokens)))\n    (catch #?(:clj Throwable :cljs :default) _ {})))\n\n(comment\n  (parse-fence-info \"python runtime-id=5f77e475-6178-47a3-8437-45c9c34d57ff\")\n  (parse-fence-info \"{#some-id .lang foo=nex}\")\n  (parse-fence-info \"#id clojure\")\n  (parse-fence-info \"clojure #id\")\n  (parse-fence-info \"clojure\")\n  (parse-fence-info \"{r cars, echo=FALSE}\"))\n\n;; leaf nodes\n(defn text-node [text] {:type :text :text text})\n(defn formula [text] {:type :formula :text text})\n(defn block-formula [text] {:type :block-formula :text text})\n(defn footnote-ref [ref label] (cond-> {:type :footnote-ref :ref ref} label (assoc :label label)))\n\n;; node constructors\n(defn node\n  [type content attrs top-level]\n  (cond-> {:type type :content content}\n    (seq attrs) (assoc :attrs attrs)\n    (seq top-level) (merge top-level)))\n\n(defn empty-text-node? [{text :text t :type}] (and (= :text t) (empty? text)))\n\n(defn push-node [{:as doc ::keys [path]} node]\n  (try\n    (cond-> doc\n      ;; \u2b07 mdit produces empty text tokens at mark boundaries, see edge cases below\n      (not (empty-text-node? node))\n      (-> #_doc\n       (update ::path inc-last)\n       (update-in (pop path) conj node)))\n    (catch #?(:clj Exception :cljs js/Error) e\n      (throw (ex-info (str \"nextjournal.markdown cannot add node: \" node \" at path: \" path)\n                      {:doc doc :node node} e)))))\n\n(def push-nodes (partial reduce push-node))\n\n(defn open-node\n  ([doc type] (open-node doc type {}))\n  ([doc type attrs] (open-node doc type attrs {}))\n  ([doc type attrs top-level]\n   (-> doc\n       (push-node (node type [] attrs top-level))\n       (update ::path into [:content -1]))))\n\n;; after closing a node, document ::path will point at it\n(def ppop (comp pop pop))\n(defn close-node [doc] (update doc ::path ppop))\n(defn update-current [{:as doc path ::path} fn & args] (apply update-in doc path fn args))\n\n(defn current-parent-node\n  \"Given an open parsing context `doc`, returns the parent of the node which was last parsed into the document.\"\n  [{:as doc ::keys [path]}]\n  (assert path \"A path is needed in document context to retrieve the current node: `current-parent-node` cannot be called after `parse`.\")\n  (get-in doc (ppop path)))\n\n(defn current-ancestor-nodes\n  \"Given an open parsing context `doc`, returns the list of ancestors of the node last parsed into the document, up to but\n   not including the top document.\"\n  [{:as doc ::keys [path]}]\n  (assert path \"A path is needed in document context to retrieve the current node: `current-ancestor-nodes` cannot be called after `parse`.\")\n  (loop [p (ppop path) ancestors []]\n    (if (seq p)\n      (recur (ppop p) (conj ancestors (get-in doc p)))\n      ancestors)))\n\n;; TODO: consider rewriting parse in terms of this zipper\n(defn ->zip [doc]\n  (z/zipper (every-pred map? :type) :content\n            (fn [node cs] (assoc node :content (vec cs)))\n            doc))\n\n(defn assign-node-id+emoji [{:as doc ::keys [id->index path] :keys [text->id+emoji-fn]}]\n  (let [{:keys [id emoji]} (when (ifn? text->id+emoji-fn) (-> doc (get-in path) text->id+emoji-fn))\n        id-count (when id (get id->index id))]\n    (cond-> doc\n      id\n      (update-in [::id->index id] (fnil inc 0))\n      (or id emoji)\n      (update-in path (fn [node]\n                        (cond-> node\n                          id (assoc-in [:attrs :id] (cond-> id id-count (str \"-\" (inc id-count))))\n                          emoji (assoc :emoji emoji)))))))\n\n(comment                                                    ;; path after call\n  (-> empty-doc                                             ;; [:content -1]\n      (open-node :heading)                                  ;; [:content 0 :content -1]\n      (push-node {:node/type :text :text \"foo\"})            ;; [:content 0 :content 0]\n      (push-node {:node/type :text :text \"foo\"})            ;; [:content 0 :content 1]\n      close-node                                            ;; [:content 1]\n\n      (open-node :paragraph)                                ;; [:content 1 :content]\n      (push-node {:node/type :text :text \"hello\"})\n      close-node\n      (open-node :bullet-list)\n      ;;\n      ))\n;; endregion\n\n;; region TOC builder:\n;; toc nodes are heading nodes but with `:type` `:toc` and an extra branching along\n;; the key `:children` representing the sub-sections of the node\n(defn into-toc [toc {:as toc-item :keys [heading-level]}]\n  (loop [toc toc l heading-level toc-path [:children]]\n    ;; `toc-path` is `[:children i\u2081 :children i\u2082 ... :children]`\n    (let [type-path (assoc toc-path (dec (count toc-path)) :type)]\n      (cond\n        ;; insert intermediate default empty :content collections for the final update-in (which defaults to maps otherwise)\n        (not (get-in toc toc-path))\n        (recur (assoc-in toc toc-path []) l toc-path)\n\n        ;; fill in toc types for non-contiguous jumps like h1 -> h3\n        (not (get-in toc type-path))\n        (recur (assoc-in toc type-path :toc) l toc-path)\n\n        (= 1 l)\n        (update-in toc toc-path (fnil conj []) toc-item)\n\n        :else\n        (recur toc\n               (dec l)\n               (conj toc-path\n                     (max 0 (dec (count (get-in toc toc-path)))) ;; select last child at level if it exists\n                     :children))))))\n\n(defn add-to-toc [doc {:as h :keys [heading-level]}]\n  (cond-> doc (pos-int? heading-level) (update :toc into-toc (assoc h :type :toc))))\n\n(defn set-title-when-missing [{:as doc :keys [title]} heading]\n  (cond-> doc (nil? title) (assoc :title (md.transform/->text heading))))\n\n(defn add-title+toc\n  \"Computes and adds a :title and a :toc to the document-like structure `doc` which might have not been constructed by means of `parse`.\"\n  [{:as doc :keys [content]}]\n  (let [rf (fn [doc heading] (-> doc (add-to-toc heading) (set-title-when-missing heading)))\n        xf (filter (comp #{:heading} :type))]\n    (reduce (xf rf) (assoc doc :toc {:type :toc}) content)))\n\n(comment\n (-> {:type :toc}\n     ;;(into-toc {:heading-level 3 :title \"Foo\"})\n     ;;(into-toc {:heading-level 2 :title \"Section 1\"})\n     (into-toc {:heading-level 1 :title \"Title\" :type :toc})\n     (into-toc {:heading-level 4 :title \"Section 2\" :type :toc})\n     ;;(into-toc {:heading-level 4 :title \"Section 2.1\"})\n     ;;(into-toc {:heading-level 2 :title \"Section 3\"})\n     )\n\n (-> \"# Top _Title_\n\npar\n\n### Three\n\n## Two\n\npar\n- and a nested\n- ### Heading not included\n\nfoo\n\n## Two Again\n\npar\n\n# One Again\n\n[[TOC]]\n\n#### Four\n\nend\"\n     nextjournal.markdown/parse\n     :toc\n     ))\n;; endregion\n\n;; region token handlers\n(declare apply-tokens)\n(defmulti apply-token (fn [_doc token] (:type token)))\n(defmethod apply-token :default [doc token]\n  (prn :apply-token/unknown-type {:token token})\n  doc)\n\n;; blocks\n(defmethod apply-token \"heading_open\" [doc token] (open-node doc :heading {} {:heading-level (hlevel token)}))\n(defmethod apply-token \"heading_close\" [doc {doc-level :level}]\n  (let [{:as doc ::keys [path]} (close-node doc)\n        doc' (assign-node-id+emoji doc)\n        heading (-> doc' (get-in path) (assoc :path path))]\n    (cond-> doc'\n      (zero? doc-level)\n      (-> (add-to-toc heading)\n          (set-title-when-missing heading)))))\n\n;; for building the TOC we just care about headings at document top level (not e.g. nested under lists) \u2b06\n\n(defmethod apply-token \"paragraph_open\" [doc {:as _token :keys [hidden]}] (open-node doc (if hidden :plain :paragraph)))\n(defmethod apply-token \"paragraph_close\" [doc _token] (close-node doc))\n\n(defmethod apply-token \"bullet_list_open\" [doc {{:as attrs :keys [has-todos]} :attrs}] (open-node doc (if has-todos :todo-list :bullet-list) attrs))\n(defmethod apply-token \"bullet_list_close\" [doc _token] (close-node doc))\n\n(defmethod apply-token \"ordered_list_open\" [doc {:keys [attrs]}] (open-node doc :numbered-list attrs))\n(defmethod apply-token \"ordered_list_close\" [doc _token] (close-node doc))\n\n(defmethod apply-token \"list_item_open\" [doc {{:as attrs :keys [todo]} :attrs}] (open-node doc (if todo :todo-item :list-item) attrs))\n(defmethod apply-token \"list_item_close\" [doc _token] (close-node doc))\n\n(defmethod apply-token \"math_block\" [doc {text :content}] (push-node doc (block-formula text)))\n(defmethod apply-token \"math_block_end\" [doc _token] doc)\n\n(defmethod apply-token \"hr\" [doc _token] (push-node doc {:type :ruler}))\n\n(defmethod apply-token \"blockquote_open\" [doc _token] (open-node doc :blockquote))\n(defmethod apply-token \"blockquote_close\" [doc _token] (close-node doc))\n\n(defmethod apply-token \"tocOpen\" [doc _token] (open-node doc :toc))\n(defmethod apply-token \"tocBody\" [doc _token] doc) ;; ignore body\n(defmethod apply-token \"tocClose\" [doc _token] (-> doc close-node (update-current dissoc :content)))\n\n(defmethod apply-token \"code_block\" [doc {:as _token c :content}]\n  (-> doc\n      (open-node :code)\n      (push-node (text-node c))\n      close-node))\n(defmethod apply-token \"fence\" [doc {:as _token i :info c :content}]\n  (-> doc\n      (open-node :code {} (assoc (parse-fence-info i) :info i))\n      (push-node (text-node c))\n      close-node))\n\n;; footnotes\n(defmethod apply-token \"footnote_ref\" [{:as doc :keys [footnotes]} token]\n  (push-node doc (footnote-ref (+ (count footnotes) (get-in* token [:meta :id]))\n                               (get-in* token [:meta :label]))))\n\n(defmethod apply-token \"footnote_anchor\" [doc token] doc)\n\n(defmethod apply-token \"footnote_open\" [{:as doc ::keys [footnote-offset]} token]\n  ;; consider an offset in case we're parsing multiple inputs into the same context\n  (let [ref (+ (get-in* token [:meta :id]) footnote-offset)\n        label (get-in* token [:meta :label])]\n    (open-node doc :footnote nil (cond-> {:ref ref} label (assoc :label label)))))\n\n(defmethod apply-token \"footnote_close\" [doc token] (close-node doc))\n\n(defmethod apply-token \"footnote_block_open\" [{:as doc :keys [footnotes] ::keys [path]} _token]\n  ;; store footnotes at a top level `:footnote` key\n  (let [footnote-offset (count footnotes)]\n    (-> doc\n        (assoc ::path [:footnotes (dec footnote-offset)]\n               ::footnote-offset footnote-offset\n               ::path-to-restore path))))\n\n(defmethod apply-token \"footnote_block_close\"\n  ;; restores path for addding new tokens\n  [{:as doc ::keys [path-to-restore]} _token]\n  (-> doc\n      (assoc ::path path-to-restore)\n      (dissoc ::path-to-restore ::footnote-offset)))\n\n(defn footnote->sidenote [{:keys [ref label content]}]\n  ;; this assumes the footnote container is a paragraph, won't work for lists\n  (node :sidenote (-> content first :content) nil (cond-> {:ref ref} label (assoc :label label))))\n\n(defn node-with-sidenote-refs [p-node]\n  (loop [l (->zip p-node) refs []]\n    (if (z/end? l)\n      (when (seq refs)\n        {:node (z/root l) :refs refs})\n      (let [{:keys [type ref]} (z/node l)]\n        (if (= :footnote-ref type)\n          (recur (z/next (z/edit l assoc :type :sidenote-ref)) (conj refs ref))\n          (recur (z/next l) refs))))))\n\n(defn insert-sidenote-containers\n  \"Handles footnotes as sidenotes.\n\n   Takes and returns a parsed document. When the document has footnotes, wraps every top-level block which contains footnote references\n   with a `:footnote-container` node, into each of such nodes, adds a `:sidenote-column` node containing a `:sidenote` node for each found ref.\n   Renames type `:footnote-ref` to `:sidenote-ref.\"\n  [{:as doc ::keys [path] :keys [footnotes]}]\n  (if-not (seq footnotes)\n    doc\n    (let [root (->zip doc)]\n      (loop [loc (z/down root) parent root]\n        (cond\n          (nil? loc)\n          (-> parent z/node (assoc :sidenotes? true))\n          (contains? #{:plain :paragraph :blockquote :numbered-list :bullet-list :todo-list :heading :table}\n                     (:type (z/node loc)))\n          (if-some [{:keys [node refs]} (node-with-sidenote-refs (z/node loc))]\n            (let [new-loc (-> loc (z/replace {:type :sidenote-container :content []})\n                              (z/append-child node)\n                              (z/append-child {:type :sidenote-column\n                                               :content (mapv #(footnote->sidenote (get footnotes %)) refs)}))]\n              (recur (z/right new-loc) (z/up new-loc)))\n            (recur (z/right loc) parent))\n          :else\n          (recur (z/right loc) parent))))))\n\n(comment\n  (-> \"_hello_ what and foo[^note1] and^[some other note].\n\nAnd what.\n\n[^note1]: the _what_\n\n* and new text[^endnote] at the end.\n* the\n  * hell^[that warm place]\n\n[^endnote]: conclusion.\n\"\n      nextjournal.markdown/tokenize\n      parse\n      #_ flatten-tokens\n      insert-sidenote-containers)\n\n  (-> empty-doc\n      (update :text-tokenizers (partial map normalize-tokenizer))\n      (apply-tokens (nextjournal.markdown/tokenize \"what^[the heck]\"))\n      insert-sidenote-columns\n      (apply-tokens (nextjournal.markdown/tokenize \"# Hello\"))\n      insert-sidenote-columns\n      (apply-tokens (nextjournal.markdown/tokenize \"is^[this thing]\"))\n      insert-sidenote-columns))\n\n;; tables\n;; table data tokens might have {:style \"text-align:right|left\"} attrs, maybe better nested node > :attrs > :style ?\n(defmethod apply-token \"table_open\" [doc _token] (open-node doc :table))\n(defmethod apply-token \"table_close\" [doc _token] (close-node doc))\n(defmethod apply-token \"thead_open\" [doc _token] (open-node doc :table-head))\n(defmethod apply-token \"thead_close\" [doc _token] (close-node doc))\n(defmethod apply-token \"tr_open\" [doc _token] (open-node doc :table-row))\n(defmethod apply-token \"tr_close\" [doc _token] (close-node doc))\n(defmethod apply-token \"th_open\" [doc token] (open-node doc :table-header (:attrs token)))\n(defmethod apply-token \"th_close\" [doc _token] (close-node doc))\n(defmethod apply-token \"tbody_open\" [doc _token] (open-node doc :table-body))\n(defmethod apply-token \"tbody_close\" [doc _token] (close-node doc))\n(defmethod apply-token \"td_open\" [doc token] (open-node doc :table-data (:attrs token)))\n(defmethod apply-token \"td_close\" [doc _token] (close-node doc))\n\n(comment\n  (->\n\"\n| Syntax |  JVM                     | JavaScript                      |\n|--------|:------------------------:|--------------------------------:|\n|   foo  |  Loca _lDate_ ahoiii     | goog.date.Date                  |\n|   bar  |  java.time.LocalTime     | some [kinky](link/to/something) |\n|   bag  |  java.time.LocalDateTime | $\\\\phi$                         |\n\"\n    nextjournal.markdown/parse\n    nextjournal.markdown.transform/->hiccup\n    ))\n\n;; ## Handling of Text Tokens\n;;\n;;    normalize-tokenizer :: {:regex, :doc-handler} | {:tokenizer-fn, :handler} -> Tokenizer\n;;    Tokenizer :: {:tokenizer-fn :: TokenizerFn, :doc-handler :: DocHandler}\n;;\n;;    Match :: Any\n;;    Handler :: Match -> Node\n;;    IndexedMatch :: (Match, Int, Int)\n;;    TokenizerFn :: String -> [IndexedMatch]\n;;    DocHandler :: Doc -> {:match :: Match} -> Doc\n\n(def hashtag-tokenizer\n  {:regex #\"(^|\\B)#[\\w-]+\"\n   :pred #(every? (complement #{:link}) (map :type (current-ancestor-nodes %)))\n   :handler (fn [match] {:type :hashtag :text (subs (match 0) 1)})})\n\n(def internal-link-tokenizer\n  {:regex #\"\\[\\[([^\\]]+)\\]\\]\"\n   :pred #(every? (complement #{:link}) (map :type (current-ancestor-nodes %)))\n   :handler (fn [match] {:type :internal-link :text (match 1)})})\n\n(comment\n  (->> \"# Hello #Fishes\n\n> what about #this\n\n_this #should be a tag_, but this [_actually #foo shouldnt_](/bar/) is not.\"\n       nextjournal.markdown/tokenize\n       (parse (update empty-doc :text-tokenizers conj hashtag-tokenizer))))\n\n\n(defn normalize-tokenizer\n  \"Normalizes a map of regex and handler into a Tokenizer\"\n  [{:as tokenizer :keys [doc-handler pred handler regex tokenizer-fn]}]\n  (assert (and (or doc-handler handler) (or regex tokenizer-fn)))\n  (cond-> tokenizer\n    (not doc-handler) (assoc :doc-handler (fn [doc {:keys [match]}] (push-node doc (handler match))))\n    (not tokenizer-fn) (assoc :tokenizer-fn (partial re-idx-seq regex))\n    (not pred) (assoc :pred (constantly true))))\n\n(defn tokenize-text-node [{:as tkz :keys [tokenizer-fn pred doc-handler]} doc {:as node :keys [text]}]\n  ;; TokenizerFn -> HNode -> [HNode]\n  (assert (and (fn? tokenizer-fn) (fn? doc-handler) (fn? pred) (string? text))\n          {:text text :tokenizer tkz})\n  (let [idx-seq (when (pred doc) (tokenizer-fn text))]\n    (if (seq idx-seq)\n      (let [text-hnode (fn [s] (assoc (text-node s) :doc-handler push-node))\n            {:keys [nodes remaining-text]}\n            (reduce (fn [{:as acc :keys [remaining-text]} [match start end]]\n                      (-> acc\n                          (update :remaining-text subs 0 start)\n                          (cond->\n                            (< end (count remaining-text))\n                            (update :nodes conj (text-hnode (subs remaining-text end))))\n                          (update :nodes conj {:doc-handler doc-handler\n                                               :match match :text text\n                                               :start start :end end})))\n                    {:remaining-text text :nodes ()}\n                    (reverse idx-seq))]\n        (cond-> nodes\n          (seq remaining-text)\n          (conj (text-hnode remaining-text))))\n      [node])))\n\n(defmethod apply-token \"text\" [{:as doc :keys [text-tokenizers]} {:keys [content]}]\n  (reduce (fn [doc {:as node :keys [doc-handler]}] (doc-handler doc (dissoc node :doc-handler)))\n          doc\n          (reduce (fn [nodes tokenizer]\n                    (mapcat (fn [{:as node :keys [type]}]\n                              (if (= :text type) (tokenize-text-node tokenizer doc node) [node]))\n                            nodes))\n                  [{:type :text :text content :doc-handler push-node}]\n                  text-tokenizers)))\n\n(comment\n  (def mustache (normalize-tokenizer {:regex #\"\\{\\{([^\\{]+)\\}\\}\" :handler (fn [m] {:type :eval :text (m 1)})}))\n  (tokenize-text-node mustache {} {:text \"{{what}} the {{hellow}}\"})\n  (apply-token (assoc empty-doc :text-tokenizers [mustache])\n               {:type \"text\" :content \"foo [[bar]] dang #hashy taggy [[what]] #dangy foo [[great]] and {{eval}} me\"})\n\n  (parse (assoc empty-doc\n                :text-tokenizers\n                [(normalize-tokenizer {:regex #\"\\{\\{([^\\{]+)\\}\\}\"\n                                       :doc-handler (fn [{:as doc ::keys [path]} {[_ meta] :match}]\n                                                      (update-in doc (ppop path) assoc :meta meta))})])\n         (nextjournal.markdown/tokenize \"# Title {{id=heading}}\n* one\n* two\")))\n\n;; inlines\n(defmethod apply-token \"inline\" [doc {:as _token ts :children}] (apply-tokens doc ts))\n(defmethod apply-token \"math_inline\" [doc {text :content}] (push-node doc (formula text)))\n(defmethod apply-token \"math_inline_double\" [doc {text :content}] (push-node doc (formula text)))\n\n;; https://spec.commonmark.org/0.30/#softbreak\n(defmethod apply-token \"softbreak\" [doc _token] (push-node doc {:type :softbreak}))\n;; https://spec.commonmark.org/0.30/#hard-line-break\n(defmethod apply-token \"hardbreak\" [doc _token] (push-node doc {:type :hardbreak}))\n\n;; images\n(defmethod apply-token \"image\" [doc {:keys [attrs children]}] (-> doc (open-node :image attrs) (apply-tokens children) close-node))\n\n;; marks\n(defmethod apply-token \"em_open\" [doc _token] (open-node doc :em))\n(defmethod apply-token \"em_close\" [doc _token] (close-node doc))\n(defmethod apply-token \"strong_open\" [doc _token] (open-node doc :strong))\n(defmethod apply-token \"strong_close\" [doc _token] (close-node doc))\n(defmethod apply-token \"s_open\" [doc _token] (open-node doc :strikethrough))\n(defmethod apply-token \"s_close\" [doc _token] (close-node doc))\n(defmethod apply-token \"link_open\" [doc token] (open-node doc :link (:attrs token)))\n(defmethod apply-token \"link_close\" [doc _token] (close-node doc))\n(defmethod apply-token \"code_inline\" [doc {text :content}] (-> doc (open-node :monospace) (push-node (text-node text)) close-node))\n\n;; html (ignored)\n(defmethod apply-token \"html_inline\" [doc _] doc)\n(defmethod apply-token \"html_block\" [doc _] doc)\n;; endregion\n\n;; region data builder api\n(defn pairs->kmap [pairs] (into {} (map (juxt (comp keyword first) second)) pairs))\n(defn apply-tokens [doc tokens]\n  (let [mapify-attrs-xf (map (fn [x] (update* x :attrs pairs->kmap)))]\n    (reduce (mapify-attrs-xf apply-token) doc tokens)))\n\n(def empty-doc {:type :doc\n                :content []\n                ;; Id -> Nat, to disambiguate ids for nodes with the same textual content\n                ::id->index {}\n                ;; Node -> {id : String, emoji String}, dissoc from context to opt-out of ids\n                :text->id+emoji-fn (comp text->id+emoji md.transform/->text)\n                :toc {:type :toc}\n                :footnotes []\n                ::path [:content -1] ;; private\n                :text-tokenizers []})\n\n(defn parse\n  \"Takes a doc and a collection of markdown-it tokens, applies tokens to doc. Uses an emtpy doc in arity 1.\"\n  ([tokens] (parse empty-doc tokens))\n  ([doc tokens] (-> doc\n                    (update :text-tokenizers (partial map normalize-tokenizer))\n                    (apply-tokens tokens)\n                    (dissoc ::path\n                            ::id->index\n                            :text-tokenizers\n                            :text->id+emoji-fn))))\n\n(comment\n\n (-> \"# \ud83c\udfb1 Markdown Data\n\nsome _emphatic_ **strong** [link](https://foo.com)\n\n---\n\n> some ~~nice~~ quote\n> for fun\n\n## Formulas\n\n[[TOC]]\n\n$$\\\\Pi^2$$\n\n- [ ]  and\n- [x]  some $\\\\Phi_{\\\\alpha}$ latext\n- [ ]  bullets\n\n## Sidenotes\n\nhere [^mynote] to somewhere\n\n## Fences\n\n```py id=\\\"aaa-bbb-ccc\\\"\n1\nprint(\\\"this is some python\\\")\n2\n3\n```\n\n![Image Text](https://img.icons8.com/officel/16/000000/public.png)\n\nHline Section\n-------------\n\n### but also [[indented code]]\n\n    import os\n    os.listdir('/')\n\nor monospace mark [`real`](/foo/bar) fun.\n\n[^mynote]: Here you _can_ `explain` at lenght\n\"\n     nextjournal.markdown/tokenize\n     parse\n     ;;seq\n     ;;(->> (take 10))\n     ;;(->> (take-last 4))\n     ))\n;; endregion\n\n;; region zoom-in at section\n(defn section-at [{:as doc :keys [content]} [_ pos :as path]]\n  ;; TODO: generalize over path (zoom-in at)\n  ;; supports only top-level headings atm (as found in TOC)\n  (let [{:as h section-level :heading-level} (get-in doc path)\n        in-section? (fn [{l :heading-level}] (or (not l) (< section-level l)))]\n    (when section-level\n      {:type :doc\n       :content (cons h\n                      (->> content\n                           (drop (inc pos))\n                           (take-while in-section?)))})))\n\n(comment\n (some-> \"# Title\n\n## Section 1\n\nfoo\n\n- # What is this? (no!)\n- maybe\n\n### Section 1.2\n\n## Section 2\n\nsome par\n\n### Section 2.1\n\nsome other par\n\n### Section 2.2\n\n#### Section 2.2.1\n\ntwo two one\n\n#### Section 2.2.2\n\ntwo two two\n\n## Section 3\n\nsome final par\"\n    nextjournal.markdown/parse\n    (section-at [:content 9])                         ;; \u2b05 paths are stored in TOC sections\n    nextjournal.markdown.transform/->hiccup))\n;; endregion\n\n\n;; ## \ud83d\udd27 Debug\n;; A view on flattened tokens to better inspect tokens\n(defn flatten-tokens [tokens]\n  (into []\n        (comp\n         (mapcat (partial tree-seq (comp seq :children) :children))\n         (map #(select-keys % [:type :content :hidden :level :info :meta])))\n        tokens))\n"],"x_google_ignoreList":[0]}